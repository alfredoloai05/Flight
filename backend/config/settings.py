"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# === Paths base ===
BASE_DIR = Path(__file__).resolve().parent.parent

# === Cargar .env (ubicado en backend/.env) ===
load_dotenv(BASE_DIR / ".env")

def env(name: str, default=None):
    return os.getenv(name, default)

# ==========================
# Básicos (desde .env)
# ==========================
SECRET_KEY = env("DJANGO_SECRET_KEY", "dev-secret-key")
DEBUG = env("DJANGO_DEBUG", "True") == "True"

# Lista separada por comas, p.ej.: ALLOWED_HOSTS=localhost,127.0.0.1
_allowed = [h.strip() for h in env("ALLOWED_HOSTS", "").split(",") if h.strip()]
ALLOWED_HOSTS = _allowed or ["*"]  # en dev permitimos todo; en prod pon explícitos

# ==========================
# Apps
# ==========================
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "destinations",
    "flights",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS lo antes posible tras Session
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# ==========================
# Base de datos (Postgres)
# ==========================
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DB_NAME", "flightsdb"),
        "USER": env("DB_USER", "admin"),
        "PASSWORD": env("DB_PASSWORD", "admin123"),
        "HOST": env("DB_HOST", "127.0.0.1"),
        "PORT": env("DB_PORT", "5433"),
        "CONN_MAX_AGE": int(env("DB_CONN_MAX_AGE", "60")),
        "OPTIONS": {"sslmode": env("DB_SSLMODE", "disable")},
    }
}

# ==========================
# Password validators
# ==========================
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ==========================
# i18n / zona horaria
# ==========================
LANGUAGE_CODE = "en-us"
TIME_ZONE = env("TIME_ZONE", "America/Guayaquil")
USE_I18N = True
USE_TZ = True

# ==========================
# Static files
# ==========================
STATIC_URL = "static/"

# ==========================
# Defaults
# ==========================
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ==========================
# CORS
# ==========================
# Por defecto permitimos todos en dev; en prod usa CORS_ALLOWED_ORIGINS
CORS_ALLOW_ALL_ORIGINS = env("CORS_ALLOW_ALL", "True") == "True"
if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = [
        o.strip()
        for o in env("CORS_ALLOWED_ORIGINS", "").split(",")
        if o.strip()
    ]

# ==========================
# DRF / JWT
# ==========================
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

# ==========================
# Cache (Redis) y Celery
# ==========================
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env("REDIS_CACHE_URL", "redis://127.0.0.1:6379/1"),
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "flights",
    }
}

CELERY_BROKER_URL = env("REDIS_URL", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = env("REDIS_URL", "redis://127.0.0.1:6379/0")
CELERY_TIMEZONE = TIME_ZONE

from celery.schedules import crontab  # noqa: E402

CELERY_BEAT_SCHEDULE = {
    "notify-upcoming-flights-daily-7am": {
        "task": "flights.tasks.notify_upcoming_flights",
        "schedule": crontab(hour=7, minute=0),
    },
}

# ==========================
# Email (dev)
# ==========================
EMAIL_BACKEND = env("EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", "noreply@flights.local")
